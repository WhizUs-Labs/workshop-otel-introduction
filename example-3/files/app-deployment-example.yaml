---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: demo-app
  namespace: example-3
  labels:
    app.kubernetes.io/name: demo-app
    app.kubernetes.io/component: demo-app-deployment
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: demo-app
      app.kubernetes.io/component: demo-app-pod
  minReadySeconds: 5
  progressDeadlineSeconds: 120
  replicas: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: demo-app
        app.kubernetes.io/component: demo-app-pod
    spec:
      containers:
      - image: ghcr.io/whizus-labs/workshop-otel-introduction/otel-demo-app:latest
        imagePullPolicy: IfNotPresent
        name: app
        resources:
          limits:
            cpu: 400m
            memory: 500Mi
          requests:
            cpu: 200m
            memory: 400Mi
        ports:
        - containerPort: 8080
          name: web
        env:
        - name: DEMO_APP_NAME
          # to identify the application in jaeger easily, make sure to prefix the example in the value
          value: example-1-demo
        - name: DEMO_APP_PORT
          value: "8080"
        - name: DEMO_APP_TARGET_HOST
          # put here the host (WITH PROTOCOL) of the OTHER application deployment
          # you want to have 2 app that send data to each other
          value: "http://demo-app2.example-1"
        - name: DEMO_APP_TARGET_PORT
          # port of the other app / service of the other app
          value: "8080"
        - name: OTEL_SERVICE_NAME
          # to identify the application in jaeger easily, make sure to prefix the example in the value
          value: "example-1-demo"
        - name: OTEL_TRACES_EXPORTER
          value: "otlp"
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          value: "http://YOUR-OTEL-AGENT-SVC-HERE:YOUR-OTEL-AGENT-SVC-PORT-HERE"
        - name: OTEL_NODE_RESOURCE_DETECTORS
          value: "env,host,os"
        - name: NODE_OPTIONS
          value: "--require @opentelemetry/auto-instrumentations-node/register"


